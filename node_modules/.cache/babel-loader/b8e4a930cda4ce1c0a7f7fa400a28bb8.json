{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useLayoutEffect, useState } from \"react\";\nexport const useSize = () => {\n  _s();\n\n  const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n  const [collapsed, setCollapsed] = useState(false);\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n\n      if (window.innerWidth < 850) {\n        setCollapsed(true);\n      } else {\n        setCollapsed(false);\n      }\n    }\n\n    window.addEventListener(\"resize\", updateSize);\n    updateSize();\n    return () => window.removeEventListener(\"resize\", updateSize);\n  }, []);\n  return {\n    innerWidth: size[0],\n    innerHeight: size[1],\n    collapsed: collapsed,\n    setCollapsed: setCollapsed\n  };\n};\n\n_s(useSize, \"bLT/NVCcpTAfa5hOO/nvovhBfEY=\");","map":{"version":3,"sources":["D:/Desktop/sarjanHardware/sarjanHardware/src/Commonitem/WindowSize.js"],"names":["useLayoutEffect","useState","useSize","size","setSize","window","innerWidth","innerHeight","collapsed","setCollapsed","updateSize","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,OAA1C;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,CAACI,MAAM,CAACC,UAAR,EAAoBD,MAAM,CAACE,WAA3B,CAAD,CAAhC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACAD,EAAAA,eAAe,CAAC,MAAM;AACpB,aAASU,UAAT,GAAsB;AACpBN,MAAAA,OAAO,CAAC,CAACC,MAAM,CAACC,UAAR,EAAoBD,MAAM,CAACE,WAA3B,CAAD,CAAP;;AACA,UAAIF,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;AAC3BG,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF;;AACDJ,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCD,UAAlC;AACAA,IAAAA,UAAU;AACV,WAAO,MAAML,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCF,UAArC,CAAb;AACD,GAZc,EAYZ,EAZY,CAAf;AAaA,SAAO;AACLJ,IAAAA,UAAU,EAAEH,IAAI,CAAC,CAAD,CADX;AAELI,IAAAA,WAAW,EAAEJ,IAAI,CAAC,CAAD,CAFZ;AAGLK,IAAAA,SAAS,EAAEA,SAHN;AAILC,IAAAA,YAAY,EAAEA;AAJT,GAAP;AAMD,CAtBM;;GAAMP,O","sourcesContent":["import { useLayoutEffect, useState } from \"react\";\r\n\r\nexport const useSize = () => {\r\n  const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  useLayoutEffect(() => {\r\n    function updateSize() {\r\n      setSize([window.innerWidth, window.innerHeight]);\r\n      if (window.innerWidth < 850) {\r\n        setCollapsed(true);\r\n      } else {\r\n        setCollapsed(false);\r\n      }\r\n    }\r\n    window.addEventListener(\"resize\", updateSize);\r\n    updateSize();\r\n    return () => window.removeEventListener(\"resize\", updateSize);\r\n  }, []);\r\n  return {\r\n    innerWidth: size[0],\r\n    innerHeight: size[1],\r\n    collapsed: collapsed,\r\n    setCollapsed: setCollapsed\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}